---
- name: Crear o actualizar usuarios AD via túnel SSH y enviar credenciales por correo
  hosts: "{{ domain_server }}"
  gather_facts: no
  serial: 1

  vars:
    puerto_base_tunel_local: 59850
    usuarios:
      - user: kyndcval
        description: "815/K/002268/Kyndryl/Carlos Valdivia Arrunategui/"
        name: Carlos
        lastname: Valdivia
        mail: Carlos.Valdivia.Arrunategui@kyndryl.com

  pre_tasks:
    - name: Calcular puerto dinámico de túnel
      set_fact:
        puerto_dinamico_tunel: "{{ puerto_base_tunel_local | int + ansible_play_hosts_all.index(inventory_hostname) | int }}"

    - name: Establecer ansible_port
      set_fact:
        ansible_port: "{{ puerto_dinamico_tunel }}"

    - name: Establecer túnel SSH
      command: >
        ssh -f -N -L {{ puerto_dinamico_tunel }}:{{ target_actual_ip }}:{{ target_actual_winrm_port }}
        -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ExitOnForwardFailure=yes
        -o ServerAliveInterval=60 -o ConnectTimeout=15
        {{ jumphost_user }}@{{ jumphost_ip }}
      delegate_to: localhost
      changed_when: false
      register: tunnel_setup_status

    - name: Esperar que el túnel esté activo
      wait_for:
        host: 127.0.0.1
        port: "{{ puerto_dinamico_tunel }}"
        timeout: 20
        delay: 2
        state: started
      delegate_to: localhost
      when: tunnel_setup_status.rc == 0

  tasks:
    - name: Crear o actualizar usuarios y enviar correo con credenciales
      win_shell: |
        $usuarios = ConvertFrom-Json @'
        {{ usuarios | to_json }}
        '@
        $domain = (Get-ADDomain).NetBIOSName

        foreach ($u in $usuarios) {
          $username = $u.user
          # Caracteres por tipo
          $mayus = [char[]](65..90)           # A-Z
          $minus = [char[]](97..122)          # a-z
          $num   = [char[]](48..57)           # 0-9
          $spec  = [char[]]"!@#$%^&*()-_=+"

          # Al menos 1 de cada tipo obligatorio
          $base = @(
            ($mayus | Get-Random -Count 1)
            ($minus | Get-Random -Count 1)
            ($num   | Get-Random -Count 1)
            ($spec  | Get-Random -Count 1)
          )

          # Completar hasta 15 caracteres con mezcla
          $all = $mayus + $minus + $num + $spec
          $base += $all | Get-Random -Count (15 - $base.Count)
          
          # Mezclar y convertir a string
          $password = ($base | Get-Random -Count 15) -join ""
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (Get-ADUser -Filter "SamAccountName -eq '$username'") {
              Set-ADUser -Identity $username -DisplayName "$($u.name) $($u.lastname)" `
                -Description $u.description -EmailAddress $u.mail `
                -GivenName $u.name -Surname $u.lastname
              Set-ADAccountPassword -Identity $username -NewPassword $securePass -Reset
              # Activar cuenta si está deshabilitada
              $userStatus = Get-ADUser -Identity $username -Properties Enabled
              if (-not $userStatus.Enabled) {
                Enable-ADAccount -Identity $username
              }
          } else {
              New-ADUser -Name "$($u.name) $($u.lastname)" -SamAccountName $username `
                -UserPrincipalName "$username@$domain.net" `
                -DisplayName "$($u.name) $($u.lastname)" `
                -GivenName $u.name -Surname $u.lastname `
                -Description $u.description -EmailAddress $u.mail `
                -AccountPassword $securePass -Enabled $true
          }

          # Asegurar membresía en grupos críticos
          $grupos = @("Domain Users", "Domain Admins", "Administrators")
          foreach ($nombreGrupo in $grupos) {
            try {
            $grupoObj = Get-ADGroup -Filter "Name -eq '$nombreGrupo'" -ErrorAction Stop
            if ($grupoObj) {
              $grupoDN = $grupoObj.DistinguishedName
              if (-not (Get-ADGroupMember -Identity $grupoDN -Recursive | Where-Object { $_.SamAccountName -eq $username })) {
                Add-ADGroupMember -Identity $grupo -Members $username
                Write-Output "[AGREGADO] $username a $nombreGrupo"
              } else {
                Write-Output "[YA ES MIEMBRO] $username en $nombreGrupo"
              }
            }
          } catch {
            Write-Output "[ERROR] No se pudo procesar grupo $nombreGrupo: $($_.Exception.Message)"
          }
        }

          $body = "Hola`n`n$($u.name) $($u.lastname), la contraseña de su usuario $username es $password del dominio $domain`n`nSaludos Cordiales"
          Send-MailMessage -To $u.mail -From 'Ansible Automation <ansible@gromero.net>' `
            -Subject "Credenciales de acceso al dominio $domain" `
            -Body $body -SmtpServer "10.32.2.113" -Port 25
        }
      register: resultado_usuarios

    - name: Mostrar resultado
      debug:
        var: resultado_usuarios.stdout_lines

  post_tasks:
    - name: Cerrar túnel SSH
      delegate_to: localhost
      command: >
        pkill -f "ssh .* -L {{ puerto_dinamico_tunel}}:{{ target_actual_ip }}:{{ target_actual_winrm_port }}.*{{ jumphost_user }}@{{ jumphost_ip }}"
      changed_when: false
      failed_when: false
